#include <ros/ros.h>
#include "geometry_msgs/Twist.h"
/*For Keyboard
To make Robot moveable, make sure you have connected Robot and PC through USB port (or other connection)
Open new terminal and execute following command to run the core of ros :
=$ roscore

Open another terminal and execute following command run node: RosAria

=$ rosrun rosaria RosAria

The above command will make Robot ready to accept velocity command.
NOTE:: RosAria by default  uses port ID /dev/ttyUSB0 and if this port ID is not available then you can configure it on another available port ID like /dev/ttyUSB2 for example the command will be:

=$ rosrun rosaria RosAria _port:=/dev/ttyUSB0

change permissions of user to access USB0
sudo chmod 666 /dev/ttyUSB0
sudo usermod -a -G dialout $USER

=$ rosrun rosaria RosAria _port:=10.0.126.32:8101 (your ip address)
--must have exported ip address
export ROS_IP=x.x.x.x

Open one more terminal and execute following command to run node robot_keyboard:

=$ rosrun rosaria robot_keyboard

move Poineer P3-DX using keys:
Space -- STOP
Up -- forward
Down -- backward
left -- left turn
right -- right turn 

tutorial code from : http://www.ist.tugraz.at/robotics/bin/view/Main/Poineer_move
*/

//define keys used to control Pioneer
#include <signal.h>
#include <termios.h>
#define KEYCODE_R 0x43
#define KEYCODE_L 0x44
#define KEYCODE_U 0x41
#define KEYCODE_D 0x42
#define KEYCODE_Q 0x71
#define KEY_SPACE 0x20

//publishing to Twist which controls command of the drone
using geometry_msgs::Twist;
using namespace std;

//ros node publisher, time
ros::Publisher chatter_pub;
ros::Time t1;
Twist vel;
int kfd = 0;
struct termios cooked, raw;

//quiting safely
void quit(int sig)
   {
     tcsetattr(kfd, TCSANOW, &cooked);
     ros::shutdown();
     exit(0);
   }

/*main
  Main loop runs while ros is still working and can be published too.
  When a key that is a command is pressed it changes either linear or angular
   velocity, these changed values are published to RosAria/cmd_vel with
   geometry_twist
*/
int main(int argc, char** argv)
{
	//init ros connection
	ros::init(argc, argv, "robot_keyboard");	//give this node the name robot_keyboard
	ros::NodeHandle n;
	chatter_pub = n.advertise<Twist>("/RosAria/cmd_vel", 1);  //node n will publish to twist
	signal(SIGINT,quit);
	char c;
	bool dirty=false;	//indicates if there is a key press in the buffer
	t1=ros::Time::now();

	tcgetattr(kfd, &cooked);
	memcpy(&raw, &cooked, sizeof(struct termios));
	raw.c_lflag &=~ (ICANON | ECHO);
	raw.c_cc[VEOL] = 1;
	raw.c_cc[VEOF] = 2;
	tcsetattr(kfd, TCSANOW, &raw);

	//while ros is still running
	while (ros::ok())
	{       
		if(read(kfd, &c, 1) < 0)
		{
			perror("read():");
			exit(-1);
		}

		//take the input from keyboard and change velocity values, indicate change
		switch(c)
		{
			case KEYCODE_L:
				ROS_DEBUG("LEFT");
				puts("TURN LEFT");
				vel.angular.z  = 0.5;
				dirty = true;
				break;

			case KEYCODE_R:
				ROS_DEBUG("RIGHT");
				puts("TURN RIGHT");
				vel.angular.z  = -0.5;
				dirty = true;
				break;

			case KEYCODE_U:
				ROS_DEBUG("UP");
				puts("FORWARD");
				vel.linear.x = 0.2;
				vel.angular.z  = 0;
				dirty = true;
				break;

			case KEYCODE_D:
				ROS_DEBUG("DOWN");
				puts("BACKWARD");
				vel.linear.x = -0.2;
				vel.angular.z  = 0;
				ROS_DEBUG("LEFT");
				dirty = true;
				break;

			case KEY_SPACE:
				ROS_DEBUG("STOP");
				puts("SPACE");
				vel.linear.x = 0.0;
				vel.angular.z = 0.0;
				dirty = true;
		   }

		vel.linear.y=0;
		vel.linear.z=0;
		vel.angular.x = 0;
		vel.angular.y = 0;

		//if velocity was changed, publish
		if(dirty==true)
		{

			chatter_pub.publish(vel);
			dirty=false;

		}

   		//ros continues loop
		ros::spinOnce();
	}

return(0);

}
